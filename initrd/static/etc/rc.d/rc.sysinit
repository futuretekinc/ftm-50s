#!/bin/sh

#   ---------------------------------------------
#   Common settings
#   ---------------------------------------------
HOSTNAME=FTM-50S
VERSION=V1.0.0.0

hostname $HOSTNAME

#   ---------------------------------------------
#   Prints execution status.
#
#   arg1 : Execution status
#   arg2 : Continue (0) or Abort (1) on error
#   ---------------------------------------------
status ()
{
       if [ $1 -eq 0 ] ; then
               echo "[SUCCESS]"
       else
               echo "[FAILED]"

               if [ $2 -eq 1 ] ; then
                       echo "... System init aborted."
                       exit 1
               fi
       fi

}

#   ---------------------------------------------
#   Create GPIO Control Device
#   arg1 : GPIO Port Number
#   arg2 : Device Name
#   arg3 : Direction
#   ---------------------------------------------
create_gpio()
{
    case $3 in
    in )    echo $1 > /sys/class/gpio/export
            echo in > /sys/class/gpio/gpio$1/direction
            ln -s /sys/class/gpio/gpio$1/value /dev/$2;;
    out )   echo $1 > /sys/class/gpio/export
            echo out > /sys/class/gpio/gpio$1/direction
            echo $4 > /sys/class/gpio/gpio$1/value
            ln -s /sys/class/gpio/gpio$1/value /dev/$2;;
    esac
}

print_mounting()
{
	echo $1 | awk '{ printf(" Mounting %-20s : ", $1)}'
}

#   ---------------------------------------------
#   Get verbose
#   ---------------------------------------------
echo ""
echo "    System initialization..."
echo ""
echo "    Hostname       : $HOSTNAME"
echo "    Filesystem     : $VERSION"
echo ""
echo ""
echo "    Kernel release : `uname -s` `uname -r`"
echo "    Kernel version : `uname -v`"
echo ""


#   ---------------------------------------------
#   Mount file system 
#   ---------------------------------------------

print_mounting "/proc"
mount -t proc proc /proc
status $? 1

print_mounting "/sys"
mount -t sysfs sysfs /sys
status $? 1

print_mounting "/dev"
mount -t tmpfs mdev /dev
status $? 1

print_mounting "/mnt"
mount -t tmpfs tmpfs /mnt
status $? 0

#   ---------------------------------------------
#   MDEV Support
#   (Requires sysfs support in the kernel)
#   ---------------------------------------------
print_mounting "/dev/pts"
mkdir /dev/pts
mount -t devpts devpts /dev/pts
status $? 0

echo -n " Populating devices            : "
mkdir /dev/input
mkdir /dev/snd
mdev -s
status $? 0

#   ---------------------------------------------
#   Mount User Space
#   ---------------------------------------------
cat /proc/mtd | grep User >& /dev/null
if [ $? -eq 0 ] ; then
	print_mounting "/mnt/data"
	MTDBLOCK=`cat /proc/mtd | grep "User" | awk '{ print $1 }' | sed -e 's/mtd//' -e 's/://' | awk '{ print "mtdblock" $1 }'`
    mkdir /mnt/data
	
    mount -t jffs2 /dev/$MTDBLOCK /mnt/data >& /dev/null
	if [ $? -eq 0 ] ; then
		echo "[SUCCESS]"
	else
		rmdir /mnt/data
   		echo "[FAILED]"
	fi 
fi


if [ -d /mnt/data ] ; then
	if [ ! -d /mnt/data/etc ] ; then
		cp -r /etc /mnt/data/
	fi

	mv /etc /init/
	ln -s /mnt/data/etc /etc

	if [ ! -d /mnt/data/root ] ; then
		cp -r /root /mnt/data/
	fi

	mv /root /init/
	ln -s /mnt/data/root /root
fi 

#   ---------------------------------------------
#   fstab support
#   ---------------------------------------------
print_mounting "fstab"
mount -a
if [ $? -eq 0 ] ; then
    echo "[SUCCESS]"
else
    echo "[FAILED]"
fi

echo -n " Enabling hot-plug             : "
echo "/sbin/mdev" > /proc/sys/kernel/hotplug
status $? 0

#   ---------------------------------------------
#   GPIO
#   ---------------------------------------------

create_gpio 15 fectory_reset in
create_gpio 85 led_status  out 1

if [ -e /mnt/mmcblk0p1 ] && [ -e /mnt/mmcblk0p1/package/install.sh ] ; then
	/mnt/mmcblk0p1/package/install.sh	
fi

#   ---------------------------------------------
#	Network Configuration
#   ---------------------------------------------
echo ""
echo "Start services"
for i in /etc/rc.d/S* ; do
 	SERVICENAME=${i#/etc/rc.d/S??}
	echo $SERVICENAME | awk '{ printf(" Starting %-20s : ", $1)}'
 	if $i start >& /dev/null ; then
 		echo "[SUCCESS]"
 	else
 		echo "[FAIL]"
 		FAIL=1
	fi
done

#   ---------------------------------------------
#   Done!
#   ---------------------------------------------
echo ""
echo "System initialization complete."

