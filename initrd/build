#!/bin/bash

IMAGE=initrd
ROOT=_root
OUTPUT=initrd.img

dd if=/dev/zero of=$IMAGE bs=1k count=32768
mke2fs -F $IMAGE 

if [ ! -e $ROOT ]
then
	mkdir $ROOT
fi

sudo mount -o loop $IMAGE $ROOT

(
	cd 	$ROOT
	echo	"Create sub directories"

	mkdir -p bin boot dev etc sbin usr var/log var/lock tmp
	mkdir -p usr/bin usr/sbin usr/lib etc/init.d etc/rc.d etc/sysconfig/network
)

(
	cd	$ROOT/dev
	sudo mknod ram0	   	b 	1 	0	# all on needs is ram0
	sudo mknod ram1	   	b 	1 	1

	sudo mknod hda     	b 	3 	0	# compact flash
	sudo mknod hda1    	b 	3 	1
	sudo mknod hda2    	b 	3 	2
	sudo mknod hda3    	b 	3 	3
	sudo mknod hda4    	b 	3 	4

	sudo mknod mem     	c 	1 	1
	sudo mknod kmem    	c 	1 	2
	sudo mknod null    	c 	1 	3
	sudo mknod port    	c 	1 	4
	sudo mknod zero    	c 	1 	5
	sudo mknod core    	c 	1 	6
	sudo mknod full    	c 	1 	7
	sudo mknod random  	c 	1 	8 	# used by dropbear to generate keys
	sudo mknod urandom 	c 	1 	9 	# used by dropbear to generate keys
	sudo mknod vsys    	c 	1 	10

	sudo mknod ptyp0   	c 	2 	0 	# pseudo terminal devices for dropbear
	sudo mknod ptyp1   	c 	2 	1
	sudo mknod ptyp2   	c 	2	2
	sudo mknod ptyp3   	c 	2 	3
	sudo mknod ptyp4   	c 	2 	4

	sudo mknod ttyp0   	c 	3 	0 	# pseudo terminal devices for telnet
	sudo mknod ttyp1   	c 	3 	1
	sudo mknod ttyp2   	c 	3 	2
	sudo mknod ttyp3   	c 	3 	3
	sudo mknod ttyp4   	c 	3 	4

	sudo mknod ttyS0   	c 	4 	64 	# console port
	sudo mknod ttyS1   	c 	4 	65 	# used for kgdb

	sudo mknod tty0    	c 	4 	0
	sudo mknod tty1    	c 	4 	1 	# not needed
	sudo mknod tty2    	c 	4 	2 	# not needed
	sudo mknod tty3    	c 	4 	3 	# not needed
	sudo mknod tty4    	c 	4 	4 	# not needed

	sudo mknod tty     	c 	5 	0
	sudo mknod console 	c 	5 	1
	sudo mknod ptmx    	c 	5 	2 	# dropbear sshd

	sudo mknod watchdog	c	10 	130 # watchdog in SC1100

	sudo mknod ppp     	c	108	0 	# Point-to-Point Protocol

	ln -s ram0				ramdisk
	ln -s ../proc/self/fd/0 stdin 	# process i/o
	ln -s ../proc/self/fd/1 stdout
	ln -s ../proc/self/fd/2 stderr
	ln -s ../proc/kcore     kcore

	exit	3
)

(
    cd $ROOT/usr/bin
    cp /opt/STM/STLinux-2.4/devkit/armv5/target/usr/sbin/mkfs.jffs2 .
    cp /opt/STM/STLinux-2.4/devkit/armv5/target/usr/sbin/e2fsck .
    cp /opt/STM/STLinux-2.4/devkit/armv5/target/usr/sbin/flash_erase .

    exit    3
)

(
    cd $ROOT/usr/lib
    cp /opt/STM/STLinux-2.4/devkit/armv5/target/usr/lib/libz.so.1.2.5 .
    ln -s libz.so.1.2.5 libz.so.1
    cp /opt/STM/STLinux-2.4/devkit/armv5/target/usr/lib/liblzo2.so.2.0.0 .
    ln -s liblzow.so.2.0.0 liblzo2.so.2
    cp /opt/STM/STLinux-2.4/devkit/armv5/target/usr/lib/libtermcap.so.2.0.8 .
    ln -s libtermcap.so.2.0.8 libtermcap.so.2

    exit    3
)

(
	ln -sf ../init.d/watchdog   $ROOT/etc/rc.d/S10watchdog
#	ln -sf ../init.d/gpio       $ROOT/etc/rc.d/S11gpio

	ln -sf ../init.d/syslogd    $ROOT/etc/rc.d/S22syslogd
#	ln -sf ../init.d/firewall   $ROOT/etc/rc.d/S23firewall
#	ln -sf ../init.d/tc         $ROOT/etc/rc.d/S23tc

#	ln -sf ../init.d/hostapd    $ROOT/etc/rc.d/S30hostapd 
#	ln -sf ../init.d/ntpd       $ROOT/etc/rc.d/S31ntpd
#	ln -sf ../init.d/dnsmasq    $ROOT/etc/rc.d/S32dnsmasq

	ln -sf ../init.d/networking $ROOT/etc/rc.d/S40networking
#	ln -sf ../init.d/dropbear   $ROOT/etc/rc.d/S40dropbear
#	ln -sf ../init.d/mini_httpd $ROOT/etc/rc.d/S41mini_httpd

#	ln -sf ../init.d/l2tpd      $ROOT/etc/rc.d/S50l2tpd
#	ln -sf ../init.d/racoon     $ROOT/etc/rc.d/S52racoon

#	ln -sf ../init.d/l2tpd      $ROOT/etc/rc.d/K10l2tpd
#	ln -sf ../init.d/racoon     $ROOT/etc/rc.d/K11racoon

#	ln -sf ../init.d/mini_httpd $ROOT/etc/rc.d/K20mini_httpd
#	ln -sf ../init.d/dropbear   $ROOT/etc/rc.d/K21dropbear

#	ln -sf ../init.d/dnsmasq    $ROOT/etc/rc.d/K30dnsmasq
#	ln -sf ../init.d/ntpd       $ROOT/etc/rc.d/K31ntpd
	ln -sf ../init.d/hostapd    $ROOT/etc/rc.d/K32hostapd 

#	ln -sf ../init.d/tc         $ROOT/etc/rc.d/K40tc 
#	ln -sf ../init.d/firewall   $ROOT/etc/rc.d/K41firewall
#	ln -sf ../init.d/syslogd    $ROOT/etc/rc.d/K42syslogd
#	ln -sf ../init.d/network    $ROOT/etc/rc.d/K43network
#	ln -sf ../init.d/gpio       $ROOT/etc/rc.d/K44gpio

    exit    3
)

(
	cp -rf static/* $ROOT
	cp -rf apps/target/* $ROOT


	sudo umount $ROOT

	gzip -f9 $IMAGE
	mkimage -n Ramdisk -A arm -O linux -T ramdisk -C gzip -a 0x00a00000 -d $IMAGE.gz $OUTPUT
	cp $OUTPUT /tftpboot/ftm-50s-xtra/$OUTPUT

	rm -rf $IMAGE.gz $ROOT

#	for dir in $(SUBDIRS); do \
#		$(MAKE) -C $$dir; \
#	done
    
    exit    3
)
